#!/usr/bin/env groovy

def version
def serviceName

pipeline {
    agent any 
	environment {
		dotnet = 'C:\\Program Files (x86)\\dotnet\\'
	}
	
    stages {
	stage('Initialize') {
            steps {
		script {

			echo 'Dev-branch- Jenkinsfile practice - Hello world! - triggered by web hooks' 
			version = "${env.GIT_COMMIT[0..6]}-${env.BUILD_NUMBER}"
			serviceName = env.GIT_URL.replaceFirst(/^.*\/([^\/]+?).git$/, '$1')
			echo 'version : ' + version
			echo 'serviceName : ' + serviceName
		}
            }
        }
		
	stage('Checkout'){
            steps {
		script {
			echo 'URL : ' +  env.GIT_URL
			echo 'branch : ' +  env.GIT_BRANCH.toLowerCase()
			git credentialsId: 'checkoutuser', url: env.GIT_URL, branch: env.GIT_BRANCH.toLowerCase()
			echo env.GIT_BRANCH.toLowerCase() + ' : Dev-branch- successfully checked out'
		}
            }
        }
	    
	stage('Restore packages'){
            steps{
		script {
			bat "dotnet restore mathservice.csproj"
			echo 'Dev-branch- successfully restored' 
			}
		}
	}
		
	stage('Clean'){
            steps{
		script {
			bat "dotnet clean mathservice.csproj"
			echo 'Dev-branch- successfully get cleaned' 
			}
		}
	}
	
	stage('Build'){
            steps{
		script {
			build('mathservice.csproj')
			echo 'Dev-branch- successfully built' 
			}
		}
	}
    }
}

def build(String project){
	echo "dotnet publish ${project} -c Release -o ${env.WORKSPACE}/${project}-build"
	
	powershell """
		dotnet publish ${project} -c Release -o ${env.WORKSPACE}/${project}-build
		
		cp ${env.WORKSPACE}/deployment/${project}/* ${env.WORKSPACE}/${project}-build

		mkdir ${env.WORKSPACE}/${project}-build/lib
		
		tar -vczf ${env.WORKSPACE}/${project}.tar.gz -c ${env.WORKSPACE}/${project}-build .
	"""
	
}
